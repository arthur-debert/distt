#!/bin/bash
set -e

# Get the directory of the current script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# Get py-release root directory
PY_RELEASE_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
# Get repository root directory
REPO_ROOT="$(cd "$PY_RELEASE_DIR/.." && pwd)"

# Source common functions
source "$PY_RELEASE_DIR/lib/common.sh"
source "$SCRIPT_DIR/lib/github_utils.sh"

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
    --version=*)
        VERSION="${1#*=}"
        shift
        ;;
    --package-name=*)
        PACKAGE_NAME="${1#*=}"
        shift
        ;;
    --force)
        FORCE=1
        shift
        ;;
    *)
        echo "Unknown argument: $1"
        exit 1
        ;;
    esac
done

main() {
    # Check for required dependencies
    check_dependencies gh git poetry

    # Validate version if provided
    if [ -n "$VERSION" ]; then
        validate_version "$VERSION" || exit 1
    fi

    # Check if release already exists
    if github_release_exists "$PACKAGE_NAME" "$VERSION"; then
        if [ -z "$FORCE" ]; then
            error "Release v$VERSION already exists. Use --force to override."
            return 1
        else
            warn "Release v$VERSION exists but --force was specified."
            # Delete existing tag and release
            gh release delete "v$VERSION" -y || true
            git tag -d "v$VERSION" || true
            git push origin ":refs/tags/v$VERSION" || true
        fi
    fi

    # Create git tag if it doesn't exist
    if ! git rev-parse "v$VERSION" >/dev/null 2>&1; then
        log "Creating git tag v$VERSION..."
        git tag -a "v$VERSION" -m "$PACKAGE_NAME version $VERSION"
    fi

    # Push the tag
    log "Pushing git tag v$VERSION..."
    if ! git push origin "v$VERSION"; then
        error "Failed to push tag v$VERSION"
        return 1
    fi

    # Generate release notes
    log "Generating release notes..."
    notes_file=$(generate_release_notes "$VERSION" "$PACKAGE_NAME")

    # Build PyPI distribution files
    log "Building PyPI distribution files..."
    poetry build

    # Copy distribution files to release assets
    assets_dir=$(prepare_release_assets)
    mkdir -p "$assets_dir"
    cp dist/* "$assets_dir/"

    # Verify release assets
    if ! validate_release_assets; then
        error "Failed to validate release assets"
        return 1
    fi

    log "Release assets prepared successfully"
    return 0
}

main "$@"
