#!/bin/bash
set -e

# Get the directory of the current script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# Get py-release root directory
PY_RELEASE_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
# Get repository root directory
REPO_ROOT="$(cd "$PY_RELEASE_DIR/.." && pwd)"

# Source common functions
source "$PY_RELEASE_DIR/lib/common.sh"
source "$SCRIPT_DIR/lib/github_utils.sh"

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
    --version=*)
        VERSION="${1#*=}"
        shift
        ;;
    --package-name=*)
        PACKAGE_NAME="${1#*=}"
        shift
        ;;
    --force)
        FORCE=1
        shift
        ;;
    *)
        echo "Unknown argument: $1"
        exit 1
        ;;
    esac
done

main() {
    # Check for required dependencies
    check_dependencies gh git

    # Validate version if provided
    if [ -n "$VERSION" ]; then
        validate_version "$VERSION" || exit 1
    fi

    # Check if release already exists
    if github_release_exists "$PACKAGE_NAME" "$VERSION"; then
        if [ -z "$FORCE" ]; then
            log_error "Release v$VERSION already exists. Use --force to override."
            return 1
        else
            log_warn "Release v$VERSION exists but --force was specified."
            # Delete existing release
            gh release delete "v$VERSION" -y || true
        fi
    fi

    # Verify release assets exist
    if ! validate_release_assets; then
        log_error "Release assets not found. Run build step first."
        return 1
    fi

    # Create GitHub release
    log_info "Creating GitHub release v$VERSION..."
    if create_github_release "$VERSION" "$PACKAGE_NAME" ".github/release-assets/release-notes.md"; then
        log_info "Successfully created GitHub release v$VERSION"
        return 0
    else
        log_error "Failed to create GitHub release"
        return 1
    fi
}

main "$@"
