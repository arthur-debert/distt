#!/bin/bash
# Verify script for Homebrew formula
# Tests installation from Homebrew

set -e

# Get the directory of the current script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# Get py-release root directory
PY_RELEASE_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
# Get repository root directory
REPO_ROOT="$(cd "$PY_RELEASE_ROOT/.." && pwd)"

# Source common functions
source "$PY_RELEASE_ROOT/lib/common.sh"
source "$SCRIPT_DIR/lib/brew_utils.sh"

# Parse arguments
PACKAGE_NAME=${1:-$(get_package_name)}
VERSION=${2:-$(get_package_version)}
FORCE=${3:-false}

# Validate arguments
if [ -z "$PACKAGE_NAME" ]; then
    error "Package name is required"
    exit 1
fi

if [ -z "$VERSION" ]; then
    error "Version is required"
    exit 1
fi

FORMULA_PATH="$REPO_ROOT/Formula/$PACKAGE_NAME.rb"

# Check if the formula exists
if [ ! -f "$FORMULA_PATH" ]; then
    error "Formula file not found at $FORMULA_PATH"
    exit 1
fi

log "Verifying Homebrew formula for $PACKAGE_NAME version $VERSION..."

# Create a temporary directory for testing
TEMP_DIR=$(mktemp -d)
TEMP_PREFIX="$TEMP_DIR/prefix"
mkdir -p "$TEMP_PREFIX"

log "Using temporary prefix: $TEMP_PREFIX"

# Create a temporary Homebrew environment
export HOMEBREW_PREFIX="$TEMP_PREFIX"
export HOMEBREW_CELLAR="$TEMP_PREFIX/Cellar"
export HOMEBREW_REPOSITORY="$TEMP_PREFIX"
mkdir -p "$HOMEBREW_CELLAR"

# Install from local formula
log "Installing from local formula..."
brew install --prefix="$TEMP_PREFIX" --build-from-source "$FORMULA_PATH"

# Add the temporary bin directory to PATH
export PATH="$TEMP_PREFIX/bin:$PATH"

# Test help command
log "Testing '$PACKAGE_NAME --help'..."
"$PACKAGE_NAME" --help
if [ $? -ne 0 ]; then
    error "Help command test failed"
    rm -rf "$TEMP_DIR"
    exit 1
fi
log "Help command test passed"

# Test version command
log "Testing '$PACKAGE_NAME --version'..."
"$PACKAGE_NAME" --version
if [ $? -ne 0 ]; then
    error "Version command test failed"
    rm -rf "$TEMP_DIR"
    exit 1
fi
log "Version command test passed"

# Verify installed version matches expected version
INSTALLED_VERSION=$("$PACKAGE_NAME" --version | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
if [ "$INSTALLED_VERSION" != "$VERSION" ]; then
    error "Version mismatch: expected $VERSION, got $INSTALLED_VERSION"
    rm -rf "$TEMP_DIR"
    exit 1
fi

log "All verification tests passed successfully"

# Clean up
log "Cleaning up..."
rm -rf "$TEMP_DIR"
