#!/bin/bash
# Publish script for Homebrew formula
# Updates the formula in the releasee-test branch

set -e

# Get the directory of the current script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# Get py-release root directory
PY_RELEASE_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
# Get repository root directory
REPO_ROOT="$(cd "$PY_RELEASE_ROOT/.." && pwd)"

# Source common functions
source "$PY_RELEASE_ROOT/lib/common.sh"
source "$SCRIPT_DIR/lib/brew_utils.sh"

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
    --version=*)
        VERSION="${1#*=}"
        shift
        ;;
    --package-name=*)
        PACKAGE_NAME="${1#*=}"
        shift
        ;;
    --force)
        FORCE=1
        shift
        ;;
    *)
        echo "Unknown argument: $1"
        exit 1
        ;;
    esac
done

# Use defaults if not provided
if [ -z "$PACKAGE_NAME" ]; then
    PACKAGE_NAME=$(get_package_name)
fi

if [ -z "$VERSION" ]; then
    VERSION=$(get_package_version)
fi

# Validate arguments
if [ -z "$PACKAGE_NAME" ]; then
    error "Package name is required"
    exit 1
fi

if [ -z "$VERSION" ]; then
    error "Version is required"
    exit 1
fi

# Check if formula exists
FORMULA_PATH="$REPO_ROOT/Formula/$PACKAGE_NAME.rb"
if [ ! -f "$FORMULA_PATH" ]; then
    error "Formula not found at $FORMULA_PATH"
    exit 1
fi

log "Publishing formula for $PACKAGE_NAME version $VERSION..."

# Change to repository root
cd "$REPO_ROOT"

# Create and switch to releasee-test branch if it doesn't exist
if ! git rev-parse --verify releasee-test >/dev/null 2>&1; then
    log "Creating releasee-test branch..."
    git checkout -b releasee-test
else
    log "Switching to releasee-test branch..."
    git checkout releasee-test
fi

# Create Formula directory if it doesn't exist
mkdir -p Formula

# Copy the formula if it's not already in place
if [ ! -f "Formula/$PACKAGE_NAME.rb" ] || [ "$FORCE" = "1" ]; then
    log "Copying formula..."
    cp "$FORMULA_PATH" "Formula/$PACKAGE_NAME.rb"
fi

# Check for changes
if ! git diff --quiet "Formula/$PACKAGE_NAME.rb"; then
    log "Changes detected, committing..."
    git add "Formula/$PACKAGE_NAME.rb"
    git commit -m "Update $PACKAGE_NAME formula to version $VERSION"

    log "Pushing changes..."
    if git remote | grep -q '^origin$'; then
        git push origin releasee-test
    else
        log "No remote 'origin' found. Changes are committed but not pushed."
        log "To push changes manually, run: git push origin releasee-test"
    fi
else
    log "No changes detected in the formula"
fi

log "Formula published successfully"
