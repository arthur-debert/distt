#!/usr/bin/env python3
"""
Get metadata about a Python package.

Usage:
    pypi-package-info --name <package>
    pypi-package-info --version <package>
    pypi-package-info --summary <package>
    pypi-package-info --author <package>
    pypi-package-info --home-page <package>
    pypi-package-info --license <package>

Example:
    pypi-package-info --version nanodoc
"""

import argparse
import importlib.metadata
import sys


def get_metadata(package_name: str, field: str) -> str:
    """Get a specific metadata field from a package."""
    try:
        metadata = importlib.metadata.metadata(package_name)
        if field == "summary":
            return metadata.get("Summary", "")
        elif field == "home-page":
            return metadata.get("Home-page", "")
        elif field == "name":
            return metadata.get("Name", "")
        elif field == "version":
            return metadata.get("Version", "")
        elif field == "author":
            return metadata.get("Author", "")
        elif field == "license":
            return metadata.get("License", "")
        else:
            return ""
    except importlib.metadata.PackageNotFoundError:
        print(f"Package {package_name} not found", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"Error getting metadata: {e}", file=sys.stderr)
        sys.exit(1)


def main():
    """Main function."""
    parser = argparse.ArgumentParser(
        description="Get metadata about a Python package"
    )
    parser.add_argument("--name", help="Get package name")
    parser.add_argument("--version", help="Get package version")
    parser.add_argument("--summary", help="Get package summary")
    parser.add_argument("--author", help="Get package author")
    parser.add_argument("--home-page", help="Get package home page")
    parser.add_argument("--license", help="Get package license")
    args = parser.parse_args()

    # Get the package name from the first non-None argument
    package_name = None
    field = None
    for arg_name, arg_value in vars(args).items():
        if arg_value is not None:
            package_name = arg_value
            field = arg_name
            break

    if package_name is None:
        parser.print_help()
        sys.exit(1)

    try:
        print(get_metadata(package_name, field))
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main() 